{"version":3,"file":"static/js/215.fe22e9ea.chunk.js","mappings":"+TAGMA,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,QACVC,eAAe,KAINC,EAAa,mCAAG,4FACT,MACC,MAFQ,SAGJP,EAASQ,IAAT,oBAFL,MAEK,YADJ,QAFQ,uBAGnBC,EAHmB,EAGnBA,KAHmB,kBAKpBA,GALoB,2CAAH,qDAQbC,EAAY,mCAAG,WAAMC,GAAN,yFACHX,EAASQ,IAAT,iBAAuBG,IADpB,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAW,mCAAG,WAAOC,EAAaC,GAApB,yFACFd,EAASQ,IAAT,gBAA8B,CACnDL,OAAQ,CACNY,MAAOF,EACPC,KAAAA,KAJqB,uBACjBL,EADiB,EACjBA,KADiB,kBAOlBA,GAPkB,2CAAH,wDAUXO,EAAY,mCAAG,WAAML,GAAN,yFACHX,EAASQ,IAAT,iBAAuBG,EAAvB,aADG,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZQ,EAAc,mCAAG,WAAON,EAAIG,GAAX,yFACLd,EAASQ,IAAT,iBAAuBG,EAAvB,YAAqC,CAC1DR,OAAQ,CACNW,KAAAA,KAHwB,uBACpBL,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,wDAS3BC,EAAaQ,UAAY,CACvBP,GAAIQ,IAAAA,OAAAA,YAGNP,EAAYM,UAAY,CACtBL,YAAaM,IAAAA,OAAAA,WACbL,KAAMK,IAAAA,OAAAA,YAGRH,EAAaE,UAAY,CACvBP,GAAIQ,IAAAA,OAAAA,YAGNF,EAAeC,UAAY,CACzBP,GAAIQ,IAAAA,OAAAA,WACJL,KAAMK,IAAAA,OAAAA,W,sIC/DR,EAA2B,gCAA3B,EAA2E,0CAA3E,EAA2H,gCAA3H,EAAsK,gC,SCuCtK,EApCsB,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAGjBC,EAAQ,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAWE,KAC1B,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,cAAeC,EAA5C,EAA4CA,aAA5C,OACE,gBAAIC,UAAWC,EAAf,WACE,gBACEC,IACEH,EAAY,yCAC0BA,GAR7BI,qCAWXC,IAAKP,EACLQ,QAAQ,UAEV,eAAIL,UAAWC,EAAf,gBAA8BJ,QAA9B,IAA8BA,EAAAA,EAAQC,KACtC,cAAGE,UAAWC,EAAd,SAAkCL,MAXFD,EADpC,IAiBF,OAAO,eAAIK,UAAWC,EAAf,SAA8BR,GACtC,ECGD,EAvBkB,WAChB,OAAkCa,EAAAA,EAAAA,YAAlC,eAAOd,EAAP,KAAkBe,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,gHAEHvB,EAAAA,EAAAA,IAAaoB,GAFV,OAEhB3B,EAFgB,OAGtB0B,EAAa1B,EAAK+B,MAHI,gDAIbC,EAJa,KAIbA,SACTC,QAAQC,IAAIF,EAAShC,KAAKmC,SALJ,yDAAH,qDAQvBL,GACD,GAAE,CAACH,IAEyB,KAAb,OAAThB,QAAS,IAATA,OAAA,EAAAA,EAAWyB,SAChB,kEAEA,SAAC,EAAD,CAAezB,UAAWA,GAE7B,C","sources":["api/api.jsx","webpack://react-homework-template/./src/components/CastMovieCard/CastMovieCard.module.css?a4d0","components/CastMovieCard/CastMovieCard.jsx","pages/CastMovie/CastMovie.jsx"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '28eb3a3356c833fb933dbb7817e92ba6',\n    language: 'en-US',\n    include_adult: false,\n  },\n});\n\nexport const trendingMovie = async () => {\n  const mediaType = 'all';\n  const timeWindow = 'day';\n  const { data } = await instance.get(`/trending/${mediaType}/${timeWindow}`);\n\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const searchMovie = async (searchQuery, page) => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: {\n      query: searchQuery,\n      page,\n    },\n  });\n  return data;\n};\n\nexport const getMovieCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieReview = async (id, page) => {\n  const { data } = await instance.get(`/movie/${id}/reviews`, {\n    params: {\n      page,\n    },\n  });\n  return data;\n};\n\ngetMovieById.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nsearchMovie.propTypes = {\n  searchQuery: PropTypes.string.isRequired,\n  page: PropTypes.string.isRequired,\n};\n\ngetMovieCast.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\ngetMovieReview.propTypes = {\n  id: PropTypes.string.isRequired,\n  page: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"itemName\":\"CastMovieCard_itemName__+pMcV\",\"itemСharacter\":\"CastMovieCard_itemСharacter__kZYpo\",\"castItem\":\"CastMovieCard_castItem__4Bg+S\",\"castList\":\"CastMovieCard_castList__qL4xr\"};","import PropTypes from 'prop-types';\n\nimport css from './CastMovieCard.module.css';\n\nconst CastMovieCard = ({ castMovie }) => {\n  const defaultImg = process.env.PUBLIC_URL + '/cast.jpg ';\n\n  const elements = castMovie?.map(\n    ({ cast_id, character, name, original_name, profile_path }) => (\n      <li className={css.castItem} key={cast_id}>\n        <img\n          src={\n            profile_path\n              ? `https://image.tmdb.org/t/p/w185${profile_path}`\n              : defaultImg\n          }\n          alt={name}\n          loading=\"lazy\"\n        />\n        <h3 className={css.itemName}>{name ?? original_name}</h3>\n        <p className={css.itemСharacter}>{character}</p>\n      </li>\n    )\n  );\n\n  return <ul className={css.castList}>{elements}</ul>;\n};\n\nCastMovieCard.propTypes = {\n  castMovie: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      name: PropTypes.string,\n      original_name: PropTypes.string,\n      character: PropTypes.string,\n      cast_id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default CastMovieCard;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCast } from 'api/api';\nimport CastMovieCard from '../../components/CastMovieCard/CastMovieCard';\n\nconst CastMovie = () => {\n  const [castMovie, setCastMovie] = useState();\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchGetMovieCast = async () => {\n      try {\n        const data = await getMovieCast(movieId);\n        setCastMovie(data.cast);\n      } catch ({ response }) {\n        console.log(response.data.message);\n      }\n    };\n    fetchGetMovieCast();\n  }, [movieId]);\n\n  return castMovie?.length === 0 ? (\n    <p>We don't have any cast for this movie</p>\n  ) : (\n    <CastMovieCard castMovie={castMovie} />\n  );\n};\n\nexport default CastMovie;\n"],"names":["instance","axios","baseURL","params","api_key","language","include_adult","trendingMovie","get","data","getMovieById","id","searchMovie","searchQuery","page","query","getMovieCast","getMovieReview","propTypes","PropTypes","castMovie","elements","map","cast_id","character","name","original_name","profile_path","className","css","src","process","alt","loading","useState","setCastMovie","movieId","useParams","useEffect","fetchGetMovieCast","cast","response","console","log","message","length"],"sourceRoot":""}